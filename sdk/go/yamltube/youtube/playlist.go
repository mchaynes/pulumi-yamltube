// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package youtube

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Playlist struct {
	pulumi.CustomResourceState

	// the id of the channel. https://www.youtube.com/channel/<channelId>
	ChannelId pulumi.StringOutput `pulumi:"channelId"`
	// description of the playlist
	Description pulumi.StringOutput `pulumi:"description"`
	PlaylistId  pulumi.StringOutput `pulumi:"playlistId"`
	// title of the playlist
	Title pulumi.StringOutput `pulumi:"title"`
	// array of youtube links or ids. (https://www.youtube.com/watch?v=dQw4w9WgXcQ, or dQw4w9WgXcQ)
	Videos pulumi.StringArrayOutput `pulumi:"videos"`
	// visibility of the playlist. valid values are public, private, unlisted
	Visibility pulumi.StringOutput `pulumi:"visibility"`
}

// NewPlaylist registers a new resource with the given unique name, arguments, and options.
func NewPlaylist(ctx *pulumi.Context,
	name string, args *PlaylistArgs, opts ...pulumi.ResourceOption) (*Playlist, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	if args.Title == nil {
		return nil, errors.New("invalid value for required argument 'Title'")
	}
	if args.Videos == nil {
		return nil, errors.New("invalid value for required argument 'Videos'")
	}
	if args.Visibility == nil {
		return nil, errors.New("invalid value for required argument 'Visibility'")
	}
	var resource Playlist
	err := ctx.RegisterResource("yamltube:youtube:Playlist", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPlaylist gets an existing Playlist resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPlaylist(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PlaylistState, opts ...pulumi.ResourceOption) (*Playlist, error) {
	var resource Playlist
	err := ctx.ReadResource("yamltube:youtube:Playlist", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Playlist resources.
type playlistState struct {
}

type PlaylistState struct {
}

func (PlaylistState) ElementType() reflect.Type {
	return reflect.TypeOf((*playlistState)(nil)).Elem()
}

type playlistArgs struct {
	// the id of the channel. https://www.youtube.com/channel/<channelId>
	ChannelId *string `pulumi:"channelId"`
	// description of the playlist
	Description string  `pulumi:"description"`
	PlaylistId  *string `pulumi:"playlistId"`
	// title of the playlist
	Title string `pulumi:"title"`
	// array of youtube links or ids. (https://www.youtube.com/watch?v=dQw4w9WgXcQ, or dQw4w9WgXcQ)
	Videos []string `pulumi:"videos"`
	// visibility of the playlist. valid values are public, private, unlisted
	Visibility string `pulumi:"visibility"`
}

// The set of arguments for constructing a Playlist resource.
type PlaylistArgs struct {
	// the id of the channel. https://www.youtube.com/channel/<channelId>
	ChannelId pulumi.StringPtrInput
	// description of the playlist
	Description pulumi.StringInput
	PlaylistId  pulumi.StringPtrInput
	// title of the playlist
	Title pulumi.StringInput
	// array of youtube links or ids. (https://www.youtube.com/watch?v=dQw4w9WgXcQ, or dQw4w9WgXcQ)
	Videos pulumi.StringArrayInput
	// visibility of the playlist. valid values are public, private, unlisted
	Visibility pulumi.StringInput
}

func (PlaylistArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*playlistArgs)(nil)).Elem()
}

type PlaylistInput interface {
	pulumi.Input

	ToPlaylistOutput() PlaylistOutput
	ToPlaylistOutputWithContext(ctx context.Context) PlaylistOutput
}

func (*Playlist) ElementType() reflect.Type {
	return reflect.TypeOf((**Playlist)(nil)).Elem()
}

func (i *Playlist) ToPlaylistOutput() PlaylistOutput {
	return i.ToPlaylistOutputWithContext(context.Background())
}

func (i *Playlist) ToPlaylistOutputWithContext(ctx context.Context) PlaylistOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlaylistOutput)
}

// PlaylistArrayInput is an input type that accepts PlaylistArray and PlaylistArrayOutput values.
// You can construct a concrete instance of `PlaylistArrayInput` via:
//
//          PlaylistArray{ PlaylistArgs{...} }
type PlaylistArrayInput interface {
	pulumi.Input

	ToPlaylistArrayOutput() PlaylistArrayOutput
	ToPlaylistArrayOutputWithContext(context.Context) PlaylistArrayOutput
}

type PlaylistArray []PlaylistInput

func (PlaylistArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Playlist)(nil)).Elem()
}

func (i PlaylistArray) ToPlaylistArrayOutput() PlaylistArrayOutput {
	return i.ToPlaylistArrayOutputWithContext(context.Background())
}

func (i PlaylistArray) ToPlaylistArrayOutputWithContext(ctx context.Context) PlaylistArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlaylistArrayOutput)
}

// PlaylistMapInput is an input type that accepts PlaylistMap and PlaylistMapOutput values.
// You can construct a concrete instance of `PlaylistMapInput` via:
//
//          PlaylistMap{ "key": PlaylistArgs{...} }
type PlaylistMapInput interface {
	pulumi.Input

	ToPlaylistMapOutput() PlaylistMapOutput
	ToPlaylistMapOutputWithContext(context.Context) PlaylistMapOutput
}

type PlaylistMap map[string]PlaylistInput

func (PlaylistMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Playlist)(nil)).Elem()
}

func (i PlaylistMap) ToPlaylistMapOutput() PlaylistMapOutput {
	return i.ToPlaylistMapOutputWithContext(context.Background())
}

func (i PlaylistMap) ToPlaylistMapOutputWithContext(ctx context.Context) PlaylistMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlaylistMapOutput)
}

type PlaylistOutput struct{ *pulumi.OutputState }

func (PlaylistOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Playlist)(nil)).Elem()
}

func (o PlaylistOutput) ToPlaylistOutput() PlaylistOutput {
	return o
}

func (o PlaylistOutput) ToPlaylistOutputWithContext(ctx context.Context) PlaylistOutput {
	return o
}

// the id of the channel. https://www.youtube.com/channel/<channelId>
func (o PlaylistOutput) ChannelId() pulumi.StringOutput {
	return o.ApplyT(func(v *Playlist) pulumi.StringOutput { return v.ChannelId }).(pulumi.StringOutput)
}

// description of the playlist
func (o PlaylistOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Playlist) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

func (o PlaylistOutput) PlaylistId() pulumi.StringOutput {
	return o.ApplyT(func(v *Playlist) pulumi.StringOutput { return v.PlaylistId }).(pulumi.StringOutput)
}

// title of the playlist
func (o PlaylistOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v *Playlist) pulumi.StringOutput { return v.Title }).(pulumi.StringOutput)
}

// array of youtube links or ids. (https://www.youtube.com/watch?v=dQw4w9WgXcQ, or dQw4w9WgXcQ)
func (o PlaylistOutput) Videos() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Playlist) pulumi.StringArrayOutput { return v.Videos }).(pulumi.StringArrayOutput)
}

// visibility of the playlist. valid values are public, private, unlisted
func (o PlaylistOutput) Visibility() pulumi.StringOutput {
	return o.ApplyT(func(v *Playlist) pulumi.StringOutput { return v.Visibility }).(pulumi.StringOutput)
}

type PlaylistArrayOutput struct{ *pulumi.OutputState }

func (PlaylistArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Playlist)(nil)).Elem()
}

func (o PlaylistArrayOutput) ToPlaylistArrayOutput() PlaylistArrayOutput {
	return o
}

func (o PlaylistArrayOutput) ToPlaylistArrayOutputWithContext(ctx context.Context) PlaylistArrayOutput {
	return o
}

func (o PlaylistArrayOutput) Index(i pulumi.IntInput) PlaylistOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Playlist {
		return vs[0].([]*Playlist)[vs[1].(int)]
	}).(PlaylistOutput)
}

type PlaylistMapOutput struct{ *pulumi.OutputState }

func (PlaylistMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Playlist)(nil)).Elem()
}

func (o PlaylistMapOutput) ToPlaylistMapOutput() PlaylistMapOutput {
	return o
}

func (o PlaylistMapOutput) ToPlaylistMapOutputWithContext(ctx context.Context) PlaylistMapOutput {
	return o
}

func (o PlaylistMapOutput) MapIndex(k pulumi.StringInput) PlaylistOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Playlist {
		return vs[0].(map[string]*Playlist)[vs[1].(string)]
	}).(PlaylistOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PlaylistInput)(nil)).Elem(), &Playlist{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlaylistArrayInput)(nil)).Elem(), PlaylistArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlaylistMapInput)(nil)).Elem(), PlaylistMap{})
	pulumi.RegisterOutputType(PlaylistOutput{})
	pulumi.RegisterOutputType(PlaylistArrayOutput{})
	pulumi.RegisterOutputType(PlaylistMapOutput{})
}
